<?php


namespace Schedule\Core\Models;


use Phalcon\Cache\Backend;
use Phalcon\Di;
use Phalcon\Mvc\Model;
use Schedule\Core\Kernel;

abstract class CachableModel extends Model
{
	private static $_cachable = true;
	private static $_lifetime = null;

	/**
	 * Query for a set of records that match the specified conditions
	 *
	 * <code>
	 * // How many robots are there?
	 * $robots = Robots::find();
	 *
	 * echo "There are ", count($robots), "\n";
	 *
	 * // How many mechanical robots are there?
	 * $robots = Robots::find(
	 *     "type = 'mechanical'"
	 * );
	 *
	 * echo "There are ", count($robots), "\n";
	 *
	 * // Get and print virtual robots ordered by name
	 * $robots = Robots::find(
	 *     [
	 *         "type = 'virtual'",
	 *         "order" => "name",
	 *     ]
	 * );
	 *
	 * foreach ($robots as $robot) {
	 *  echo $robot->name, "\n";
	 * }
	 *
	 * // Get first 100 virtual robots ordered by name
	 * $robots = Robots::find(
	 *     [
	 *         "type = 'virtual'",
	 *         "order" => "name",
	 *         "limit" => 100,
	 *     ]
	 * );
	 *
	 * foreach ($robots as $robot) {
	 *  echo $robot->name, "\n";
	 * }
	 *
	 * // encapsulate find it into an running transaction esp. useful for application unit-tests
	 * // or complex business logic where we wanna control which transactions are used.
	 *
	 * $myTransaction = new Transaction(\Phalcon\Di::getDefault());
	 * $myTransaction->begin();
	 * $newRobot = new Robot();
	 * $newRobot->setTransaction($myTransaction);
	 * $newRobot->save(['name' => 'test', 'type' => 'mechanical', 'year' => 1944]);
	 *
	 * $resultInsideTransaction = Robot::find(['name' => 'test', Model::TRANSACTION_INDEX => $myTransaction]);
	 * $resultOutsideTransaction = Robot::find(['name' => 'test']);
	 *
	 * foreach ($setInsideTransaction as $robot) {
	 *     echo $robot->name, "\n";
	 * }
	 *
	 * foreach ($setOutsideTransaction as $robot) {
	 *     echo $robot->name, "\n";
	 * }
	 *
	 * // reverts all not commited changes
	 * $myTransaction->rollback();
	 *
	 * // creating two different transactions
	 * $myTransaction1 = new Transaction(\Phalcon\Di::getDefault());
	 * $myTransaction1->begin();
	 * $myTransaction2 = new Transaction(\Phalcon\Di::getDefault());
	 * $myTransaction2->begin();
	 *
	 *  // add a new robots
	 * $firstNewRobot = new Robot();
	 * $firstNewRobot->setTransaction($myTransaction1);
	 * $firstNewRobot->save(['name' => 'first-transaction-robot', 'type' => 'mechanical', 'year' => 1944]);
	 *
	 * $secondNewRobot = new Robot();
	 * $secondNewRobot->setTransaction($myTransaction2);
	 * $secondNewRobot->save(['name' => 'second-transaction-robot', 'type' => 'fictional', 'year' => 1984]);
	 *
	 * // this transaction will find the robot.
	 * $resultInFirstTransaction = Robot::find(['name' => 'first-transaction-robot', Model::TRANSACTION_INDEX => $myTransaction1]);
	 * // this transaction won't find the robot.
	 * $resultInSecondTransaction = Robot::find(['name' => 'first-transaction-robot', Model::TRANSACTION_INDEX => $myTransaction2]);
	 * // this transaction won't find the robot.
	 * $resultOutsideAnyExplicitTransaction = Robot::find(['name' => 'first-transaction-robot']);
	 *
	 * // this transaction won't find the robot.
	 * $resultInFirstTransaction = Robot::find(['name' => 'second-transaction-robot', Model::TRANSACTION_INDEX => $myTransaction2]);
	 * // this transaction will find the robot.
	 * $resultInSecondTransaction = Robot::find(['name' => 'second-transaction-robot', Model::TRANSACTION_INDEX => $myTransaction1]);
	 * // this transaction won't find the robot.
	 * $resultOutsideAnyExplicitTransaction = Robot::find(['name' => 'second-transaction-robot']);
	 *
	 * $transaction1->rollback();
	 * $transaction2->rollback();
	 * </code>
	 *
	 * @param mixed $parameters
	 * @return \Phalcon\Mvc\Model\ResultsetInterface
	 */
	public static function find($parameters = null)
	{
		return	parent::find(self::prepareParameters($parameters)); // TODO: Change the autogenerated stub
	}

	private static function prepareParameters($parameters = null)
	{
		/**
		 * @var  $di Di
		 * @var Backend $default
		 */
		$di = Di::getDefault();
		if (self::isCachable() && $di->has('modelsCache')) {

			$cache_key = Kernel::createCacheKey($parameters, get_called_class());
			$default = $di->get('modelsCache');
			$lifetime = (is_null(self::$_lifetime) ? $default->getLifetime() : self::$_lifetime);
			// Convert the parameters to an array
			if (!is_array($parameters)) {
				$parameters = [$parameters];
			}
			// Check if a cache key wasn't passed
			// and create the cache parameters
			if (isset($parameters['cache'])) {
				$parameters['cache']['key'] = $cache_key;
			} else {
				$parameters['cache'] = [
					'key' => $cache_key,
					'lifetime' => $lifetime,
				];
			}
		}

		return $parameters;
	}

	/**
	 * @return bool
	 */
	public static function isCachable(): bool
	{
		return self::$_cachable;
	}

	/**
	 * @param bool $cachabe
	 */
	public static function setCachable(bool $cachable): void
	{
		self::$_cachable = $cachable;
	}

	/**
	 * Query the first record that matches the specified conditions
	 *
	 * <code>
	 * // What's the first robot in robots table?
	 * $robot = Robots::findFirst();
	 *
	 * echo "The robot name is ", $robot->name;
	 *
	 * // What's the first mechanical robot in robots table?
	 * $robot = Robots::findFirst(
	 *  "type = 'mechanical'"
	 * );
	 *
	 * echo "The first mechanical robot name is ", $robot->name;
	 *
	 * // Get first virtual robot ordered by name
	 * $robot = Robots::findFirst(
	 *     [
	 *         "type = 'virtual'",
	 *         "order" => "name",
	 *     ]
	 * );
	 *
	 * echo "The first virtual robot name is ", $robot->name;
	 *
	 * // behaviour with transaction
	 * $myTransaction = new Transaction(\Phalcon\Di::getDefault());
	 * $myTransaction->begin();
	 * $newRobot = new Robot();
	 * $newRobot->setTransaction($myTransaction);
	 * $newRobot->save(['name' => 'test', 'type' => 'mechanical', 'year' => 1944]);
	 *
	 * $findsARobot = Robot::findFirst(['name' => 'test', Model::TRANSACTION_INDEX => $myTransaction]);
	 * $doesNotFindARobot = Robot::findFirst(['name' => 'test']);
	 *
	 * var_dump($findARobot);
	 * var_dump($doesNotFindARobot);
	 *
	 * $transaction->commit();
	 * $doesFindTheRobotNow = Robot::findFirst(['name' => 'test']);
	 * </code>
	 *
	 * @param mixed $parameters
	 * @return Model
	 */
	public static function findFirst($parameters = null)
	{
//		 if (is_array($parameters)){
//			 unset($parameters['di']);
//		 }
		return	parent::findFirst(self::prepareParameters($parameters));
	}

}